[
    {
      "api_name": "app_shell_portal.PortalAppShellProvider",
      "actualName": "PortalAppShellProvider",
      "description": "No description available",
      "script": "var PortalAppShellProvider = Class.create();\nPortalAppShellProvider.prototype = {\n    initialize: function() {\n    },\n\n\tprovideMenuItems: function () {\n\t\t// No default menu items. \n\t\treturn [];\n\t},\n\n\tprovideActionButtons: function() {\n\t\t// No deafault action buttons.\n\t\treturn [];\n\t},\n\n\tprocess: function(context) {\n\t\tvar result = {\n\t\t\titems: [],\n\t\t\tactionButtons: [],\n\t\t\terrMsg: []\n\t\t};\n\n\t\tvar availableExtPoints = new GlideScriptedExtensionPoint().getExtensions(\"app_shell_portal.PortalAppShellMenuProvider\");\n\n\t\tvar validExtensionPoints = availableExtPoints.filter(function (extPoint) {\n\t\t\tif (typeof extPoint.getAppId !== 'function')\n\t\t\t\treturn false;\n\t\t\ttry {\n\t\t\t\treturn extPoint.getAppId() === context.appId;\n\t\t\t} catch (e) {\n\t\t\t\tresult.errMsg.push(e + \"\");\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\t// If not valid extension point found.\n\t\tif (validExtensionPoints.length === 0) {\n\t\t\tresult.errMsg.push(gs.getMessage(\"Unable to find the valid extension point, loading default \"));\n\t\t}\n\n\t\t// If no valid extension, provide will use default implementations.\n\t\tvar api = validExtensionPoints.length > 0 ? validExtensionPoints[0] : this;\n\n\t\tif (typeof api.provideMenuItems === 'function') {\n\t\t\ttry {\n\t\t\t\tresult.items = api.provideMenuItems(context);\n\t\t\t} catch (e) {\n\t\t\t\tvar errorMessage = e + '';\n\t\t\t\tresult.errMsg.push(errorMessage);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof api.provideActionButtons === 'function') {\n\t\t\ttry {\n\t\t\t\tresult.actionButtons = api.provideActionButtons(context);\n\t\t\t} catch (e) {\n\t\t\t\tvar errorMessage = e + '';\n\t\t\t\tresult.errMsg.push(errorMessage);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\n    type: 'PortalAppShellProvider'\n};",
      "sysid": "285e55d1532511101c7eddeeff7b1279"
    },
    {
      "api_name": "global.AbstractAjaxDataUpdateChecker",
      "actualName": "AbstractAjaxDataUpdateChecker",
      "description": "AbstractAjaxDataUpdateChecker",
      "script": "var AbstractAjaxDataUpdateChecker = Class.create();\nAbstractAjaxDataUpdateChecker.prototype = Object.extendsObject(AbstractAjaxProcessor, {\n   updateData: function() {\n      var itemID = this.getParameter('sysparm_item_id');\n      var table = this.getTableName();\n      var result = \"\";\n      if (itemID != \"\" && table != null){\n         var gr = new GlideRecord(table);\n         gr.addQuery('sys_id', itemID);\n         gr.query();\n         if (gr.next()){\n            var values = this.getNewValues(itemID, gr.state);\n            if (values){\n               gr.state = values[0];\n               gr.blocked = values[1];\n               gr.blocked_reason = values[2];\n               gr.update();\n               result = values.join(\"|\");\n            }\n         }\n      }\n      return result;\n   },\n\n   whatWillChange: function() {\n      var itemID = this.getParameter('sysparm_item_id');\n      var table = this.getTableName();\n      var result = [];\n      if (itemID != \"\" && table != null){\n         var gr = new GlideRecord(table);\n         gr.addQuery('sys_id', itemID);\n         gr.query();\n         if (gr.next()){\n            var values = this.getNewValues(itemID, gr.state);\n            if (values){\n               result = this.getChangeMessages(gr, values);\n            }\n         }\n      }\n      return result.join(\"|\");\n   },\n\n   getChangeMessages: function(){\n      return [];\n   },\n\n   getNewValues: function(){\n      return null;\n   },\n\n   getTableName: function(){\n      return null;\n   },\n\t\n\t/**\n\t * Prevent public access to this processor\n\t */\n\tisPublic: function() {\n\t\treturn false;\n\t}\n});\n",
      "sysid": "31fdf1b037201000dadaa3549dbe5d7e"
    }
]